[gd_scene load_steps=2 format=3 uid="uid://b6j0crmquswkj"]

[sub_resource type="GDScript" id="GDScript_lh5yh"]
script/source = "extends EnemyState

@export_group(\"Required Nodes\", \"\")
@export var NAV_AGENT: NavigationAgent3D
@export var STEERING_BEHAVIOR: SteeringBehaviorComponent
@export var ANIMATION_TREE: AnimationTree
@export_group(\"Params\", \"\")
@export var SPEED = 1.0
@export var DISTANCE_TO_WAIT = 2.5
@export var LERP_COLLISION = 0.5
@export var LERP_NO_COLLISION = 2.0
@export var LERP_ROTATE = 2.0
@export var IWR_MUL = 2.0
@export var PATH_WAIT_TIME = 0.4

@onready var path_timer = $PathTimer

func enter():
	set_target_position()
	path_timer.start(PATH_WAIT_TIME)

func exit():
	path_timer.stop()

func update(_delta) -> StateTypes:
	var path = (NAV_AGENT.get_next_path_position() - AGENT.global_position).normalized()
	path.y = AGENT.velocity.y
	
	if STEERING_BEHAVIOR.has_collision:
		var new_velocity = (STEERING_BEHAVIOR.velocity + path).normalized()
		AGENT.velocity = AGENT.velocity.lerp(new_velocity * SPEED, _delta * LERP_COLLISION)
	else:
		AGENT.velocity = AGENT.velocity.lerp(path * SPEED, _delta * LERP_NO_COLLISION)
	
	var transform_velocity = AGENT.velocity * AGENT.global_transform.basis
	var follow_iwr = Vector2(transform_velocity.x, transform_velocity.z) * IWR_MUL
	ANIMATION_TREE.set('parameters/walk_iwr/blend_position', follow_iwr)
	
	#SMOOT LOOK AT
	if path.length() > 0.1:
		var new_t = AGENT.global_transform.looking_at(path + AGENT.global_position)
		var new_q = AGENT.quaternion.slerp(Quaternion(new_t.basis), _delta * LERP_ROTATE)
		new_q.x = 0
		new_q.z = 0
		AGENT.global_transform.basis = Basis(new_q)
	
	if NAV_AGENT.distance_to_target() <= DISTANCE_TO_WAIT:
		return StateTypes.WAIT
	return StateTypes.NONE

func set_target_position():
	if AGENT.player != null:
		NAV_AGENT.target_position = AGENT.player.global_position

func _on_path_timer_timeout():
	set_target_position()
"

[node name="FollowState" type="Node"]
script = SubResource("GDScript_lh5yh")
PATH_WAIT_TIME = 0.6

[node name="PathTimer" type="Timer" parent="."]

[connection signal="timeout" from="PathTimer" to="." method="_on_path_timer_timeout"]
