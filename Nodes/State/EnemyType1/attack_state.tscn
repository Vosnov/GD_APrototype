[gd_scene load_steps=2 format=3 uid="uid://cv0cc8jqq173a"]

[sub_resource type="GDScript" id="GDScript_yjn2f"]
script/source = "extends EnemyState

@export_group(\"Required Nodes\", \"\")
@export var ANIMATION_TREE: AnimationTree
@export var ATTACK_AREA: Area3D

@export_group(\"Params\", \"\")
@export var ATTACK_ANIM_NAMES: Array[String] = []
@export var MOVE_TO_PLAYER_WAIT_TIME = 0.5
@export var SPEED = 0.7

@onready var move_to_player_timer = $MoveToPlayerTimer

var should_move = true
var anim_is_finish = false
var attack_trans_names: Array[String] = []

func enter():
	should_move = true
	anim_is_finish = false
	
	play_animation()
	
	move_to_player_timer.one_shot = true
	move_to_player_timer.start(MOVE_TO_PLAYER_WAIT_TIME)

func exit():
	return
	anim_is_finish = false
	
func _init():
	randomize()

func _ready():
	ANIMATION_TREE.connect('animation_finished', animation_finished)
	
	var attack_trans_node = ANIMATION_TREE.tree_root.get_node('attack_trans') as AnimationNodeTransition
	for i in attack_trans_node.get_input_count():
		var input_name = attack_trans_node.get_input_name(i)
		attack_trans_names.append(input_name)

func update(_delta: float) -> StateTypes:
	#if anim_is_playing:
		#AGENT.velocity = Vector3.ZERO
		#ANIMATION_TREE.set('parameters/walk_iwr/blend_position', Vector2())
	#else:
		#AGENT.velocity = AGENT.velocity.lerp(-AGENT.global_transform.basis.z * SPEED, _delta * 6)
		#var follow_iwr = AGENT.velocity * AGENT.global_transform.basis
		#ANIMATION_TREE.set('parameters/walk_iwr/blend_position', Vector2(follow_iwr.x, follow_iwr.z))
	if should_move:
		AGENT.velocity = AGENT.velocity.lerp(-AGENT.global_transform.basis.z * SPEED, _delta * 6)
		print(AGENT.velocity)
	else:
		AGENT.velocity = AGENT.velocity.lerp(Vector3(), _delta * 6)
	if anim_is_finish:
		return StateTypes.WAIT
	return StateTypes.NONE

func animation_finished(anim_name):
	if ATTACK_ANIM_NAMES.has(anim_name):
		anim_is_finish = true

func play_animation():
	var item = attack_trans_names[randi_range(0, attack_trans_names.size() - 1)]
	ANIMATION_TREE.set(
		'parameters/attack_trans/transition_request',
		item
	)
	ANIMATION_TREE.set(
		\"parameters/attack_shot/request\", 
		AnimationNodeOneShot.ONE_SHOT_REQUEST_FIRE
	)

#func _on_player_enter_area(body: Node3D):
	#if anim_is_playing: return
	#if not state_is_active: return
	#if body is Player:
		#player_in_area = true
		#play_animation()
		#move_to_player_timer.stop()
		
#func _on_player_exit_area(body: Node3D):
	#if body is Player:
		#player_in_area = false

func attack():
	if ATTACK_AREA.get_overlapping_bodies().has(AGENT.player):
		Events.emit_signal('player_take_damage', AGENT.ATTACK_DAMAGE)

func _on_move_to_player_timer_timeout():
	should_move = false
"

[node name="AttackState" type="Node"]
script = SubResource("GDScript_yjn2f")

[node name="MoveToPlayerTimer" type="Timer" parent="."]

[connection signal="timeout" from="MoveToPlayerTimer" to="." method="_on_move_to_player_timer_timeout"]
