[gd_scene load_steps=2 format=3 uid="uid://dhi0m65ovhivy"]

[sub_resource type="GDScript" id="GDScript_f071m"]
script/source = "extends EnemyState

@onready var attack_timer = $AttackTimer
@onready var wait_timer = $WaitTimer

@export_group(\"Required Nodes\", \"\")
@export var ANIMATION_TREE: AnimationTree
@export var ATTACK_AREA: Area3D

@export_group(\"Params\", \"\")
@export var SPEED = 0.5
@export var DISTANCE_TO_WALK = 2.0
@export var DISTANCE_TO_FOLLOW = 3.0
@export var LERP_VELOCITY = 2.0
@export var LERP_ROTATE = 4.0

@export_group(\"Time\", \"\")
@export var ATTACK_TIME_MIN = 2.0
@export var ATTACK_TIME_MAX = 8.0
@export var WAIT_TIME_MIN = 1.0
@export var WAIT_TIME_MAX = 3.0

var should_attack = false
var wait_direction = Vector3()
var to_player_direction = Vector3()

func _ready():
	randomize()
	ATTACK_AREA.connect('body_entered', _on_attack_area_enter)

func enter():
	should_attack = false
	attack_timer.one_shot = true
	attack_timer.start(randf_range(ATTACK_TIME_MIN, ATTACK_TIME_MAX))
	wait_timer.start(randf_range(WAIT_TIME_MIN, WAIT_TIME_MAX))

func exit():
	wait_timer.stop()

func update(_delta: float) -> StateTypes:
	var basis_velocity = AGENT.global_transform.basis * AGENT.velocity
	var walk_iwr =  Vector2(basis_velocity.x, basis_velocity.z) / SPEED
	ANIMATION_TREE.set('parameters/walk_iwr/blend_position', walk_iwr)
	
	#SMOOT LOOK AT
	var new_t = AGENT.global_transform.looking_at(AGENT.player.global_position)
	var new_q = AGENT.quaternion.slerp(Quaternion(new_t.basis), _delta * LERP_ROTATE)
	new_q.x = 0
	new_q.z = 0
	AGENT.global_transform.basis = Basis(new_q)
	
	var dir_velocity = to_player_direction
	if AGENT.global_position.distance_to(AGENT.player.global_position) > DISTANCE_TO_WALK:
		to_player_direction = (AGENT.player.global_position - AGENT.global_position).normalized()
		to_player_direction *= SPEED
	else:
		to_player_direction = to_player_direction.lerp(Vector3(), _delta * 6)
		dir_velocity += wait_direction * SPEED
	AGENT.velocity = AGENT.velocity.lerp(dir_velocity, _delta * LERP_VELOCITY)
	
	if should_attack: return StateTypes.ATTACK
	if AGENT.global_position.distance_to(AGENT.player.global_position) > DISTANCE_TO_FOLLOW:
		return StateTypes.FOLLOW
	return StateTypes.NONE

func _on_wait_timer_timeout():
	wait_direction.x = randf_range(-1, 1)
	wait_direction.z = randf_range(-1, 1)
	wait_direction = (wait_direction * AGENT.transform.basis).normalized()
	if (wait_direction.dot(-AGENT.global_transform.basis.z) <= -0.2):
		wait_direction = Vector3()

func _on_attack_timer_timeout():
	should_attack = true

func _on_attack_area_enter(body: Node3D):
	if body is Player:
		should_attack = true
		return
"

[node name="WaitState" type="Node"]
script = SubResource("GDScript_f071m")

[node name="AttackTimer" type="Timer" parent="."]

[node name="WaitTimer" type="Timer" parent="."]

[connection signal="timeout" from="AttackTimer" to="." method="_on_attack_timer_timeout"]
[connection signal="timeout" from="WaitTimer" to="." method="_on_wait_timer_timeout"]
