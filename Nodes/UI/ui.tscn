[gd_scene load_steps=8 format=3 uid="uid://en3g0v7xjkgn"]

[ext_resource type="PackedScene" uid="uid://dwhdypbxa1gl7" path="res://Nodes/UI/inventory_ui.tscn" id="1_vjmbd"]
[ext_resource type="PackedScene" uid="uid://8nwcw66m6aqr" path="res://Nodes/UI/pause_ui.tscn" id="1_xbwcd"]
[ext_resource type="PackedScene" uid="uid://bdvj6pfhtgs1e" path="res://Nodes/UI/dead_screen.tscn" id="2_e8xum"]
[ext_resource type="PackedScene" uid="uid://drr3ddmpotjgj" path="res://Nodes/UI/message_ui.tscn" id="3_138rf"]
[ext_resource type="PackedScene" uid="uid://b2uh3a51dh3xl" path="res://Maps/test_map.tscn" id="5_80uli"]

[sub_resource type="GDScript" id="GDScript_tkxjl"]
script/source = "extends CanvasLayer

@export var PAUSE_UI: PackedScene
@export var INVENTORY_UI: PackedScene
@export var DEAD_SCREEN: PackedScene

@onready var reload_label = $ReloadData
@onready var hp_label = $HP

var inventory_instance: Node
var dead_screen_instance: Node
var pause_instance: Node

func _ready():
	Events.connect(\"player_dead\", _on_player_dead)
	Events.connect(\"player_reload_data_ui\", _on_reload_data)
	Events.connect(\"player_hp_ui\", _on_player_hp_ui)

func _on_reload_data(amount: int, total_amount: int):
	reload_label.text = str(\"Load amount: \", amount, \" Total amount: \", total_amount)

func _on_player_hp_ui(_hp: float):
	hp_label.text = str('HP: ', _hp)

func _input(_event):
	if dead_screen_instance != null: return
	if GlobalVariables.menu_ui_is_open: return
	if inventory_instance != null: return
	if pause_instance != null: return
	
	if Input.is_action_just_pressed('ui_menu'):
		inventory_instance = INVENTORY_UI.instantiate()
		add_child(inventory_instance)
	if Input.is_action_just_pressed('ui_cancel'):
		pause_instance = PAUSE_UI.instantiate()
		add_child(pause_instance)

func _on_player_dead():
	if inventory_instance != null: inventory_instance.queue_free()
	dead_screen_instance = DEAD_SCREEN.instantiate()
	add_child(dead_screen_instance)
"

[sub_resource type="GDScript" id="GDScript_py8tj"]
script/source = "extends Node

@export var MESSAGE_UI: PackedScene

@onready var tree = get_tree()

var message_ui: MessageUI
var message: String = ''

func _ready():
	Events.connect(\"message_ui\", _on_message)

func _on_message(_message: String):
	if message_ui != null and _message != message:
		message = _message
		message_ui.queue_free()
		spawn_message(_message)
		
	if message_ui == null:
		message = _message
		spawn_message(_message)

func spawn_message(_message: String):
	message_ui = MESSAGE_UI.instantiate() as MessageUI
	message_ui.MESSAGE = _message
	add_child(message_ui)
"

[node name="UI" type="CanvasLayer"]
process_mode = 3
script = SubResource("GDScript_tkxjl")
PAUSE_UI = ExtResource("1_xbwcd")
INVENTORY_UI = ExtResource("1_vjmbd")
DEAD_SCREEN = ExtResource("2_e8xum")

[node name="ReloadData" type="Label" parent="."]
offset_right = 40.0
offset_bottom = 23.0

[node name="HP" type="Label" parent="."]
offset_top = 40.0
offset_right = 40.0
offset_bottom = 63.0

[node name="MessageContainer" type="Node" parent="."]
script = SubResource("GDScript_py8tj")
MESSAGE_UI = ExtResource("3_138rf")

[node name="SubViewportContainer" type="SubViewportContainer" parent="."]
offset_right = 367.0
offset_bottom = 645.0
stretch = true

[node name="SubViewport" type="SubViewport" parent="SubViewportContainer"]
handle_input_locally = false
size = Vector2i(367, 645)
render_target_update_mode = 4

[node name="TestMap" parent="SubViewportContainer/SubViewport" instance=ExtResource("5_80uli")]
